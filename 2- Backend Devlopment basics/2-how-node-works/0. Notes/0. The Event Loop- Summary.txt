1. Event Loop: 
where all the application code that is inside callback functions is executed.

2. Thread Pool: 
Some time consuming tasks might get offloaded to the thread pool by the event loop.

3. Event-triggered architecture:
Things like our node application receiving an HTTP request on our server, or a timer expiring, or a file finishing to read, all these will emit "events" as soon as they are done with their work.

The event loop will then pick up these events, and call the callback functions that are associated with each event.


4. WORKING:

The event loop starts running right away, when we start our node application. Now, the event loop has multiple "phases", and each phase has a seperate "callback queue".

A callback queue is nothing but the callbacks coming from the events that the event loop receives.


5. There are 4 major phases of the event loop:

(i) Expired timer callbacks.
(ii) I/O polling and callbacks.
(iii) setImmediate callbacks.
(iv) Close callbacks.


6. Expired timer callbacks: 
If there are callback functions from timers that just expired, these are the first ones to be processed by the event loop. 

If a timer expires later during the time when one of the other phases are being processed, then the callback of that timer will only be called as soon as the event loop comes back to this first phase.

And it works like this in all four phases. So, callbacks in each queue are processed one by one until there are no ones left in the queue, and only then, the event loop will enter the next phase.


7. I/O polling and callbacks:
Polling means looking for new I/O events that are ready to be processed and putting them into the callback queue.

I/O means mainly stuff like networking and file access. It's in this phase where probably 99% of our code gets executed.


8. setImmediate callbacks:
This is a special kind of timer that we can use if we want to process callbacks immediately after the I/O polling and execution phase. This can be important in some more advanced use cases.


9. Close callbacks:
In this phase, all close events are processed, for example, for when a web server or a WebSocket shuts down.


10.  In addition to a seperate callback queue for each phase, there are 2 extra queues:

(i) Process.NextTick() Queue:
This is a function that we can use when we really, really need to execute a certain callback right after the current event loop phase. 

It's a bit similar to "setImmediate", with the difference that setImmediate only runs after the I/O callback phase. Both "setImmediate" and Process.NextTick() are for really advanced use cases.


(ii) Other MicroTasks Queue: 
Mainly for resolved promises.



11. If there are any callbacks in one of these two queues to be processed, they will be executed right after the current phase of the event loop finishes, instead of waiting for the entire event loop to finish.

For example, imagine that a promise resolves and returns some data from an API call while the callback of an expired timer is running. So, in this case, the promise callback will be executed right after the one from the timer finishes.


12. Once all 4 phases are finished, one "tick" of the event loop is completed. A "tick" is basically just one cycle in this event loop.

Then it's time to decide whether the loop should continue to the next "tick" or if the program should exit.

To do so, Node simply checks whether there are any timers or I/O tasks that are still running in the background, and if there aren't any, then it will exit the application. 

But if there are any pending timers or I/O tasks, then it will continue running the event loop and go straight to the next "tick".



13. GUIDELINES:

(i) Don't use the "sync" versions of functions in the "fs", "crypto", or "zlib" modules in your callback functions.

(ii) Don't perform very complex calculations in the event loop.

(iii) Be careful with JSON in very large objects, because at some point, it can start to take a long time to parse, or to stringify JSON.

(iv) Don't use all too complex regular expressions, they can take longer than expected.