[ JWT struture ]

A Json Web Token is an encoded string made up of three parts. The 'header', the 'payload' and the 'signature'. 

Now the 'header' is just some metadata about the token itself, and the 'payload' is the data that we can encode into the token, any data really that we want. So the more data we want to encode here, the bigger the JWT. Anyway, these two parts are just plain text that will get encoded, but not encrypted. So anyone will be able to decode them and to read them. So we cannot store any sensitive data in here. 

But that's not a problem at all because in the third part, so in the 'signature', is where things really get interesting. The 'signature' is created using the 'header', the 'payload' and the 'secret' that is saved on the server. And this whole process is then called 'signing' the Json Web Token. 

So, the signing algorithm takes the 'header', the 'payload' and the 'secret' to create a unique signature. So only this data plus the 'secret' can create this 'signature'. Then together with the 'header' and the 'payload', these 'signature' forms the JWT, which then gets sent to the client.

Once the server receives a JWT to grant access to a protected route, it needs to verify it in order to determine if the user really is who he claims to be. It will verify if no one changed the 'header' and the 'payload' data of the token. 


[ How does JWT verification actually work? ]

Once the JWT is received, the verification will take its 'header' and 'payload', and together with the 'secret' that is still saved on the server, basically create a 'test signature'. But the 'original signature' that was generated when the JWT was first created is still in the token. And that's the key for this verification. 

Because now all we have to do is to compare the 'test signature' with the 'original signature'. And if the 'test signature' is the same as the 'original signature', then it means that the 'payload' and the 'header' have not been modified. Because if they had been modified, then the 'test signature' would have to be different. Therefore in case where there has been no alteration of the data, we can then authenticate the user. 

And if the two signatures are actually different, well, then it means that someone tampered with the data. Usually by trying to change the 'payload'. But that third party manipulating the 'payload' does not have access to the 'secret', so they cannot sign the JWT. So the 'original signature' will never correspond to the manipulated data. And therefore, the verification will always fail in this case. And that's the key to making this whole system work. 

So to summarize it again. Without the 'secret', no one will be able to manipulate the JWT data because they cannot create a valid 'signature' for the new data. If they manipulate the data, it will always fail the verification step.